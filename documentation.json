{
    "pipes": [
        {
            "name": "ParentFilterPipe",
            "id": "pipe-ParentFilterPipe-5495ef0ed94b0ca4c3c8650b23762bc446067ae66ddd046aa0b7353fd40dac4a2722262a14f370b4174363e2609a5bf81ce58177ccba51b070de302ba74b042f",
            "file": "src/app/core/pipe/parent-filter.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "list",
                            "type": "any[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "any[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "parentFilter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'parentFilter'\n})\nexport class ParentFilterPipe implements PipeTransform {\n\n  transform(list : any[] | null, ...args: any[]): any[] {\n    console.log(list, args);\n    return list || [];\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Field",
            "id": "interface-Field-56104cbc1642855714a161de9210ea2fc682a6263719b0954bfa106640ff9fd5d347d7d36953eb1aaeb4daac150d75c7aa2a2f9e263018fe9cb113b527706c5d",
            "file": "src/app/core/domain/field.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Field {\n    name: string;\n    type: string;\n    label: string;\n    value: any;\n    store: string;\n    required?: boolean;\n    order: number;\n    controlType: string;\n    parentField:string\n    labelField:string\n    valueField:string\n}\n",
            "properties": [
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "labelField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "parentField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "valueField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Page",
            "id": "interface-Page-6b405c726df27e52fce9cebcf269491f7ee47bd57c62de1a7ec37483d2efa3357f64fcb8ae87f4de1bb938052133b11b7e42342426e186e444f9be269473c0c0",
            "file": "src/app/core/domain/page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Field } from \"./field\";\n\nexport interface Page {\n    fields: Field[];\n    name?: string;\n    title?: string;\n    description?: string;\n    url?:string\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Store",
            "id": "interface-Store-973019ced34a269a20e2254258fd540fd380407d62ffcb1c9cefd4e4cf7dc47bb1726026df7a9625aa18c6d90813b68141c748f73da736fb23d668ee247313d6",
            "file": "src/app/core/store/store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from \"rxjs\";\n\nexport interface Store<T> {\n    values(): Observable<T[]>;\n    // filter(filter: any): Observable<T[]>;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "values",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "StoreConfig",
            "id": "interface-StoreConfig-89b6191a75f25f363287d58b06257cb5cee938723ab2f2786307cc60362c292eb41aefab9f7cadf49611c42786c51fc3ed9aec624a991d9ecb143132cf00e1a3",
            "file": "src/app/core/store/store-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StoreConfig {\n    storeType:  string;\n    baseUrl:    string;\n    path:       string;\n    keyField:   string;\n    labelField: string;\n}\n\n",
            "properties": [
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "keyField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "labelField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "storeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-a870c6f6eab6a341570cb2525fb0f52469a5173bae4fe41975db1f1bf911175866b85c1d55677ab14240731be55ea8235d973c7a5b499add56752c885791677e",
            "file": "src/app/core/api/api.service.ts",
            "properties": [
                {
                    "name": "languages",
                    "defaultValue": "[\n    { code: 'EN', name: 'Engilish' },\n    { code: 'FR', name: 'French' },\n    { code: 'PT', name: 'Portuguese' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "createUpload",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<any>>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "postEvents",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  languages = [\n    { code: 'EN', name: 'Engilish' },\n    { code: 'FR', name: 'French' },\n    { code: 'PT', name: 'Portuguese' },\n  ]\n\n  constructor(private http: HttpClient) {\n  }\n\n  post(path: string, entity: any): Observable<any> {\n    return this.http.post<HttpResponse<any>>(`${environment.apiEndpoint}/${path}`, entity);\n  }\n\n  postEvents(path: string, entity: any): Observable<any> {\n    return this.http.post(`${environment.apiEndpoint}/${path}`, entity, {\n      reportProgress: true,\n      observe: 'events',\n      responseType: 'text'\n    });\n  }\n\n  get(path: string): Observable<any[]> {\n    return this.http.get<any[]>(`${environment.apiEndpoint}${path}`);\n  }\n\n  getById(path: string, id: string): Observable<any> {\n    return this.http.get<any>(`${environment.apiEndpoint}/${path}/${id}`);\n  }\n\n  createUpload(path: string, entity: any): Observable<HttpResponse<any>> {\n    return this.http.post<HttpResponse<any>>(`${environment.apiEndpoint}/${path}`, entity);\n  }\n\n  get httpClient() {\n    return this.http;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "httpClient": {
                    "name": "httpClient",
                    "getSignature": {
                        "name": "httpClient",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "JsonService",
            "id": "injectable-JsonService-52208909c6a341b46e9a7b0fa7cf72aeca0af1d5302b028ad948c007939c35fece6400bd39c82c820fef0253b5f34bec68237a09dc2ec32c594ad7842f286d3f",
            "file": "src/app/core/api/json.service.ts",
            "properties": [
                {
                    "name": "languages",
                    "defaultValue": "[\n    { code: 'EN', name: 'Engilish' },\n    { code: 'FR', name: 'French' },\n    { code: 'PT', name: 'Portuguese' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JsonService {\n\n  languages = [\n    { code: 'EN', name: 'Engilish' },\n    { code: 'FR', name: 'French' },\n    { code: 'PT', name: 'Portuguese' },\n  ]\n\n  constructor(private http: HttpClient) {\n  }\n\n  get<T>(path: string): Observable<T> {\n    return this.http.get<T>(`${environment.baseUrl}${path}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StoreService",
            "id": "injectable-StoreService-83e98cbb20e1c0e57827023a8c5847964508f42edd3fb1d54536a18e2d19dc35c074a9bb555f104867dfa51a6951ba326057dd91558fbbbc2ca314d7d09b5234",
            "file": "src/app/core/store/store.service.ts",
            "properties": [
                {
                    "name": "stateObjects",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "stateQuery",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "storeConfigs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "stores",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | Store<any>>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "getState",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ApiService } from '../api/api.service';\nimport { JsonService } from '../api/json.service';\nimport { BasicApiStore } from './basic-api-store';\nimport { JsonStore } from './json-store';\n\nimport { Store } from './store';\nimport { StoreConfig } from './store-config';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  stateObjects: { [k: string]: any } = {};\n\n  stateQuery: { [k: string]: string } = {};\n\n  stores: Map<string, Store<any>> = new Map();\n  \n  storeConfigs!:{ [k: string]: StoreConfig };\n\n  constructor(private jsonService: JsonService,private apiService:ApiService) {\n    jsonService.get<{ [k: string]: StoreConfig }>('/assets/application/config/stores.json').subscribe(data => {\n      this.storeConfigs=data;\n    });\n  }\n\n  getState<T extends Store<any>>(name: string): T {\n    if (!this.stores.has(name)) {\n      switch(this.storeConfigs[name].storeType) {\n        case 'JsonStore':\n          this.stores.set(name, new JsonStore(this.storeConfigs[name],this.jsonService));\n          break;\n        case 'ApiStore':\n          this.stores.set(name, new BasicApiStore(this.storeConfigs[name],this.apiService));\n      }\n      \n    }\n    return this.stores.get(name) as T;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "jsonService",
                        "type": "JsonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "jsonService",
                        "type": "JsonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "BasicApiStore",
            "id": "class-BasicApiStore-7a3ae8ec930d6ceb45ce92d3ed35b5fe0426d306b0baadbd4586fe2f7b3f37b7cbc883982d1a0548bc57710b0f348e4f1ab6894f75a85e59db2ac38aeabbd6ee",
            "file": "src/app/core/store/basic-api-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from \"rxjs\";\nimport { ApiService } from \"../api/api.service\";\nimport { Store } from \"./store\";\nimport { StoreConfig } from \"./store-config\";\n\nexport class BasicApiStore implements Store<any> {\n    \n    constructor(private storeConfig:StoreConfig,apiService:ApiService) {\n\n    }\n    filter(filter: any): Observable<any> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    values(): Observable<any> {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storeConfig",
                        "type": "StoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "storeConfig",
                        "type": "StoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "filter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "values",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Store"
            ]
        },
        {
            "name": "JsonStore",
            "id": "class-JsonStore-7d3a25fbe6a31124f3b03d88fcecb54d46ed37aeacac86a85d8055940cc56eefd2881734a27ad0c3a13c75b13134d0523a7cbb44a5814b8be21325859bd9870a",
            "file": "src/app/core/store/json-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { JsonService } from '../api/json.service';\nimport { Store } from './store';\nimport { StoreConfig } from './store-config';\n\nexport class JsonStore implements Store<any> {\n    protected _list$ = new BehaviorSubject<any[]>([]);\n    list$ = this._list$.asObservable();\n\n    constructor(\n        private storeConfig: StoreConfig,\n        private jsonService: JsonService\n    ) {\n        jsonService.get<any>(`${storeConfig.path}`).subscribe((data) => {\n            console.log(data);\n            this._list$.next(data);\n        });\n    }\n    values(): Observable<any[]> {\n        return this.list$;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storeConfig",
                        "type": "StoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jsonService",
                        "type": "JsonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "storeConfig",
                        "type": "StoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jsonService",
                        "type": "JsonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_list$",
                    "defaultValue": "new BehaviorSubject<any[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "list$",
                    "defaultValue": "this._list$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "values",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Store"
            ]
        }
    ],
    "directives": [
        {
            "name": "ClickAwayDirective",
            "id": "directive-ClickAwayDirective-4c45288248ed070e08e745997d6bd9a0eccc6bd1ed8f28defcb6dd8aba47a7fd5a074c5a0686929acecd046c3483eb89c7159394f37441ec797fdca2758f0384",
            "file": "src/app/core/directives/click-away.directive.ts",
            "type": "directive",
            "description": "<p>Example Usage  &lt;a (clickAway)=&quot;showChildren=false&quot;/&gt;</p>\n",
            "rawdescription": "\n\nExample Usage  <a (clickAway)=\"showChildren=false\"/>\n",
            "sourceCode": "import {Directive, ElementRef, Output, EventEmitter, HostListener} from '@angular/core';\n\n/**\n *Example Usage  <a (clickAway)=\"showChildren=false\"/>\n */\n@Directive({\n    selector: '[clickAway]'\n})\nexport class ClickAwayDirective {\n    constructor(private _elementRef : ElementRef) {\n        // console.log('ClickAway Directive Constructor');\n    }\n \n    @Output()\n    public clickAway = new EventEmitter();\n \n    @HostListener('document:click', ['$event.target'])\n    public onClick(targetElement:HTMLElement) {\n        console.log('ClickAway Directive');\n        const clickedInside = this._elementRef.nativeElement.contains(targetElement);\n        if (!clickedInside) {\n            this.clickAway.emit(null);\n        }\n    }\n}",
            "selector": "[clickAway]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickAway",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ComponentHostDirective",
            "id": "directive-ComponentHostDirective-35d60bd1497e6bf8b007d5d6a4fc5c3b51b37426401c8a49bb681157bf45d181ba35b9839c441910db52e9fb41d40492445bf084ed8a845275a13329ea741053",
            "file": "src/app/core/component-host.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[appComponentHost]'\n})\nexport class ComponentHostDirective {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n",
            "selector": "[appComponentHost]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FormValueDirective",
            "id": "directive-FormValueDirective-4a56db390f244ea0528d5e53fd49c1c74856774ffd3ddc95846cbbdefe73a54603c74575248a104b42b724d2b82f56db270b0d67b835418cf4bbb3ae17b453e7",
            "file": "src/app/core/directives/form-value.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Renderer2,\n  HostListener,\n  forwardRef,\n  HostBinding\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n  selector: '[formValue]',\n  providers:\n  [\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormValueDirective), multi: true }\n  ]\n})\nexport class FormValueDirective implements ControlValueAccessor {\n  @HostBinding('attr.contenteditable') enabled = false;\n\n  private onChange!: (value: string) => void;\n  private onTouched!: () => void;\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) { }\n\n  @HostListener('input') onInput(): void {\n    this.onChange(this.elementRef.nativeElement.innerHTML);\n  }\n\n  @HostListener('blur') onBlur(): void {\n    this.onTouched();\n  }\n\n  writeValue(value: string): void {\n    console.log(value)\n    this.elementRef.nativeElement.innerText =  value ;\n  }\n\n  registerOnChange(onChange: (value: string) => void): void {\n    this.onChange = onChange;\n  }\n\n  registerOnTouched(onTouched: () => void): void {\n    this.onTouched = onTouched;\n  }\n\n  setDisabledState(disabled: boolean): void {\n    this.enabled = !disabled;\n  }\n}",
            "selector": "[formValue]",
            "providers": [
                {
                    "name": "{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormValueDirective), multi: true }",
                    "type": "directive"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.contenteditable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33
                },
                {
                    "name": "input",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29
                }
            ],
            "propertiesClass": [
                {
                    "name": "enabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.contenteditable'"
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'blur'"
                        }
                    ]
                },
                {
                    "name": "onInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "onTouched",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onTouched",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "ControlValueAccessor"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-48d05a461f682a6b2f89773a85f8aaaee505133266b2b4c84b8efe4a40957a4b3d3d72d3e65448730e38acbaed3a714dfd39d40ebad864f509e000ac763d94d9",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentHost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentHostDirective",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "ComponentHostDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "data",
                    "defaultValue": "{id: 1, name: 'sajith'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "model",
                    "defaultValue": "new SelectionModel(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "options",
                    "defaultValue": "[\n    {value:'1',label:'one'},\n    {value:'2',label:'two'},\n    {value:'3',label:'three'},\n    {value:'4',label:'four'},\n    {value:'5',label:'five'},\n    {value:'6',label:'six'},\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "popup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupComponent",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PopupComponent, {static: true}"
                        }
                    ]
                },
                {
                    "name": "selection",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title",
                    "defaultValue": "'ng-dynamic-page'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showPopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "test",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ComponentHostDirective } from './core/component-host.directive';\nimport { DynamicFormComponent } from './core/dynamic-form/dynamic-form.component';\nimport { Page } from \"src/app/core/domain/page\";\nimport { firstValueFrom } from 'rxjs';\nimport { JsonService } from './core/api/json.service';\nimport { PopupComponent } from './popup/popup.component';\nimport { RedComponent } from './sample/red/red.component';\nimport {SelectionModel} from '@angular/cdk/collections'\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'ng-dynamic-page';\n\n  @ViewChild(ComponentHostDirective, { static: true }) componentHost!: ComponentHostDirective;\n\n  @ViewChild(PopupComponent, { static: true }) popup!: PopupComponent;\n\n  model = new SelectionModel(true);\n\n  data = {id: 1, name: 'sajith'};\n\n  selection = [];\n\n  options = [\n    {value:'1',label:'one'},\n    {value:'2',label:'two'},\n    {value:'3',label:'three'},\n    {value:'4',label:'four'},\n    {value:'5',label:'five'},\n    {value:'6',label:'six'},\n  ]\n\n  constructor(private jsonService: JsonService) {\n\n  }\n\n  ngOnInit(): void {\n    // this.init();\n\n    // this.popup.show(RedComponent);\n\n    const model = new SelectionModel(false);\n\n    model.changed.subscribe(() => {\n      console.log(model.selected);\n    });\n    \n    \n    model.toggle(\"1\");\n    model.toggle(\"8\");\n    model.toggle(\"1\");\n    // console.log(model.selected);\n\n    \n\n  }\n\n\n  async init() {\n    const viewContainerRef = this.componentHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    const componentRef = viewContainerRef.createComponent<DynamicFormComponent>(DynamicFormComponent);\n    const page = await firstValueFrom(this.jsonService.get<Page>('/assets/application/pages/sample-page.json'));\n\n    componentRef.instance.init(page);\n  }\n\n  showPopup() {\n    this.popup.show(RedComponent)\n  }\n\n  test($event: any) {\n   this.model.toggle(this.data);\n  }\n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "jsonService",
                        "type": "JsonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "jsonService",
                        "type": "JsonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n</p>\n\n<button (click)=\"showPopup()\">Show popup</button>\n\n<app-popup></app-popup>\n\n\n<ng-template appComponentHost></ng-template>\n\n<input type=\"checkbox\" (change)=\"test($event)\"> Test\n\n{{this.model.selected | json}}\n\n\n    <app-multi-select [(ngModel)]=\"selection\" [options]=\"options\"> </app-multi-select>\n\n                   <p class=\"mt-3\" >Form value: {{selection | json }}</p>"
        },
        {
            "name": "BaseComponent",
            "id": "component-BaseComponent-52e472e7828f4e4fade5563d0fe5d5605f715aaf16ea927e70c6bb1d948ced6e08abf65178f6a3c73adcba25d4045b630f4aa5cf4fedfe369dd8a1231233a5ef",
            "file": "src/app/core/controls/base-conrol/base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component,  OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-base'\n  , template: ''})\nexport class BaseComponent implements OnDestroy {\n\n  destroy$ = new Subject<boolean>();\n\n\n  ngOnDestroy() {\n    // this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "BaseConrolComponent",
            "id": "component-BaseConrolComponent-5a931e57abede7e032bb928923d6b9bdc62909e6eab9bcfb083656fca333139c2dfaaf81589163819ffa6e20b088b3c128509628085d252a0856a0f28daa484e",
            "file": "src/app/core/controls/base-conrol/base-conrol.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base-conrol",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any | any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any | any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { BaseComponent } from './base.component';\n\n\n@Component({\n  selector: 'app-base-conrol',\n  template: ''\n})\nexport abstract class BaseConrolComponent extends BaseComponent implements ControlValueAccessor  {\n\n  onChange = (_: any) => { }\n  onTouch = () => { }\n  \n  constructor() { \n    super();\n  }\n  abstract writeValue(obj: any | any[]): void;\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "extends": "BaseComponent",
            "implements": [
                "ControlValueAccessor"
            ]
        },
        {
            "name": "DynamicFormComponent",
            "id": "component-DynamicFormComponent-e6ddd35a633dcbefccb567dde96428dfeeac50536e30749d305b3bc9588ea1977a7d7867aefeeb3cf9f39bb90ec4b5b33786b3748556ccd7aca9552fc813176b",
            "file": "src/app/core/dynamic-form/dynamic-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form",
            "styleUrls": [
                "./dynamic-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Page",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "parentValues",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "ready",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "stores",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "buildForm",
                    "args": [
                        {
                            "name": "fields",
                            "type": "Field[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "Field[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "page",
                            "type": "Page",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "Page",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Page } from 'src/app/core/domain/page';\nimport { Field } from 'src/app/core/domain/field';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { StoreService } from '../store/store.service';\nimport { Store } from '../store/store';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  styleUrls: ['./dynamic-form.component.css'],\n})\nexport class DynamicFormComponent implements OnInit {\n  ready = false;\n  formGroup!: FormGroup;\n  page!: Page;\n  stores: { [k: string]: Store<any> } = {};\n  parentValues: { [k: string]: Observable<string> } = {};\n\n  constructor(private storeService: StoreService) {}\n\n  ngOnInit(): void {\n    console.log('DynamicFormComponent.ngOnInit()');\n  }\n\n  async init(page: Page) {\n    this.page = page;\n    await this.buildForm(page.fields);\n    this.ready = true;\n  }\n\n  private async buildForm(fields: Field[]) {\n    const parentFields = new Set(\n      fields\n        .filter((field) => field.parentField !== undefined)\n        .map((field) => field.parentField)\n    );\n\n    this.formGroup = new FormGroup({});\n    for (let field of fields) {\n      if (field.store) {\n        this.stores[field.store]= this.storeService.getState(field.store);\n      }\n\n      const formControl = new FormControl(field.value);\n      this.formGroup.addControl(field.name, formControl);\n\n      //any other field depends on this field\n      if (parentFields.has(field.name)) {\n        this.parentValues[field.name]=formControl.valueChanges;\n      }\n    }\n\n    console.log(this.formGroup,this.stores);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dynamic-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"ready; else loading\">\n  <form [formGroup]=\"formGroup\">\n    <ng-container *ngFor=\"let field of page.fields; index as i\">\n      <div [ngSwitch]=\"field.type\">\n        <label>{{ field.label }}<br>\n          <input\n            *ngSwitchCase=\"'text'\"\n            formControlName=\"{{ field.name }}\"\n            type=\"text\"/>\n\n          <select\n            *ngSwitchCase=\"'select'\"\n            formControlName=\"{{ field.name }}\">\n            <option selected disabled value=null>Select</option>\n            <option *ngFor=\"let value of stores[field.store].values() | async |  parentFilter: (parentValues[field.parentField] | async)\" value=\"{{value[field.valueField]}}\" >{{value[field.labelField]}}</option>\n        </select>\n\n        </label>\n      </div>\n    </ng-container>\n  </form>\n  {{ formGroup.value | json }}\n</ng-container>\n\n<ng-template #loading>Loading...</ng-template>\n\n<!-- {{parentValues | a | json}} -->"
        },
        {
            "name": "MultiSelectComponent",
            "id": "component-MultiSelectComponent-ba2cc222c8e173b94ce48d1fb53e17dc4fa26a00874532eb3f1ed86b53a28c53c0c7469e9e0155098aedddf1fd3b4c6a24314122efdfcdb3ea64268b3409da77",
            "file": "src/app/core/multi-select/multi-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => MultiSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-multi-select",
            "styleUrls": [
                "./multi-select.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "'value'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedOptions",
                    "defaultValue": "new SelectionModel(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "BaseConrolComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "BaseConrolComponent"
                    }
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseConrolComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseConrolComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseConrolComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { SelectionModel } from '@angular/cdk/collections';\nimport { Component, forwardRef, Input } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BaseConrolComponent } from '../controls/base-conrol/base-conrol.component';\n\n@Component({\n  selector: 'app-multi-select',\n  templateUrl: './multi-select.component.html',\n  styleUrls: ['./multi-select.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MultiSelectComponent),\n      multi: true\n    }\n  ]  \n})\nexport class MultiSelectComponent extends BaseConrolComponent {\n\n  isOpen = false;\n  _options!: any[];\n  @Input() label: string = 'label';\n  @Input() value: string = 'value';\n\n  selectedOptions = new SelectionModel(true);\n  selectedLabel!: string | unknown;\n\n  constructor(){\n    super();\n    console.log(this.selectedOptions);\n  }\n\n  writeValue(value: any[]): void {\n    console.log('writeValue', value);\n  }\n  \n\n  @Input()\n  public set options(options: any[]) {\n    console.log('options', options);\n    this._options = options;\n  }\n\n  toggle(option: any) {\n    this.selectedOptions.toggle(option);\n    this.onChange(this.selectedOptions.selected.map((o:any) => o[this.value]));\n    this.selectedLabel = this.selectedOptions.selected.map((o:any) => o[this.label]).join(', ');\n    \n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./multi-select.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "extends": "BaseConrolComponent",
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "options",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "options",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<span (click)=\"isOpen = !isOpen\" type=\"button\" cdkOverlayOrigin #trigger=\"cdkOverlayOrigin\"\n  class=\"\n    appearance-none\n    rounded\n    border border-gray-500\n    px-2\n    py-2\n    text-sm text-gray-600\n    hover:border-blue-300\n    focus:border-blue-400\n    focus:outline-none\n    flex\n  \"\n>\n  <label class=\"flex-grow\">{{selectedLabel}}</label>\n\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    class=\"h-5 w-5\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fill-rule=\"evenodd\"\n      d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n      clip-rule=\"evenodd\"\n    />\n  </svg>\n</span>\n\n<ng-template \n  cdkConnectedOverlay\n  [cdkConnectedOverlayOrigin]=\"trigger\"\n  [cdkConnectedOverlayOpen]=\"isOpen\"\n>\n  <span class=\"flex flex-col\">\n    <label *ngFor=\"let option of _options\">\n      <input type=\"checkbox\"  [checked]=\"selectedOptions?.isSelected(option)\" (change)=\"toggle(option)\"  /> {{ option[label] }}\n    </label>\n  </span>\n</ng-template>\n"
        },
        {
            "name": "PopupComponent",
            "id": "component-PopupComponent-9f8c2f97e47ff429e1db886499301f91e6b4c5af6a5949de3bda9476ab101d37433ac80cd96108717679cdba3ad818d26bd13c7d7b7b08927e9afee8ca22e202",
            "file": "src/app/popup/popup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popup",
            "styleUrls": [
                "./popup.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./popup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentHost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentHostDirective",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "ComponentHostDirective, {static: false}"
                        }
                    ]
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "baseComponent",
                            "type": "Type<BaseComponent>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "baseComponent",
                            "type": "Type<BaseComponent>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Type, ViewChild } from '@angular/core';\nimport { ComponentHostDirective } from '../core/component-host.directive';\nimport { BaseComponent } from '../core/controls/base-conrol/base.component';\n\n@Component({\n  selector: 'app-popup',\n  templateUrl: './popup.component.html',\n  styleUrls: ['./popup.component.css']\n})\nexport class PopupComponent implements OnInit {\n\n  @ViewChild(ComponentHostDirective, { static: false }) componentHost!: ComponentHostDirective;\n\n  visible = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  show(baseComponent:Type<BaseComponent>): void {\n\n    this.visible = true;\n    setTimeout(() => {\n      const viewContainerRef = this.componentHost.viewContainerRef;\n      viewContainerRef.clear();\n      const componentRef = viewContainerRef.createComponent< BaseComponent>(baseComponent);\n        \n    }, 300);\n   \n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popup.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"visible\" class=\"inset-0 bg-slate-500/20 absolute  grid place-content-center\" >\n\n    <ng-template appComponentHost>\n    \n    </ng-template> \n    \n\n</div>\n\n\n"
        },
        {
            "name": "RedComponent",
            "id": "component-RedComponent-18afedf43347d3e2cdbddaae824453ccaf2451bd7ef74eb5ab3013cdc65e3a44b32e1e56667d8a302322071c22e6e3ab481a93cfe061b21a58cefb636f42003a",
            "file": "src/app/sample/red/red.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-red",
            "styleUrls": [
                "./red.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./red.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { BaseComponent } from 'src/app/core/controls/base-conrol/base.component';\n\n\n@Component({\n  selector: 'app-red',\n  templateUrl: './red.component.html',\n  styleUrls: ['./red.component.css']\n})\nexport class RedComponent extends BaseComponent implements OnInit {\n  constructor(private http: HttpClient) {\n    super();\n  }\n\n  ngOnInit(): void {\n    console.log('RedComponent.ngOnInit',this.http);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./red.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<img src=\"https://picsum.photos/500/400?random=1\">"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-c8061ca2b5fcdf1e2dd524f2612b64745e93961980795ac87f7cafeeed817a4855f30233ed6fb9b1f20b3ebb282f9f809455c57f023548f541263c9471297fff",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { DynamicFormComponent } from './core/dynamic-form/dynamic-form.component';\nimport { ComponentHostDirective } from './core/component-host.directive';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ParentFilterPipe } from './core/pipe/parent-filter.pipe';\nimport { PopupComponent } from './popup/popup.component';\nimport { RedComponent } from './sample/red/red.component';\nimport { MultiSelectComponent } from './core/multi-select/multi-select.component';\nimport { OverlayModule } from '@angular/cdk/overlay';\n// import { ClickAwayDirective } from './core/directives/click-away.directive';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DynamicFormComponent,\n    ComponentHostDirective,\n    ParentFilterPipe,\n    PopupComponent,\n    RedComponent,\n    MultiSelectComponent,\n    // ClickAwayDirective\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    OverlayModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ComponentHostDirective"
                        },
                        {
                            "name": "DynamicFormComponent"
                        },
                        {
                            "name": "MultiSelectComponent"
                        },
                        {
                            "name": "ParentFilterPipe"
                        },
                        {
                            "name": "PopupComponent"
                        },
                        {
                            "name": "RedComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiEndpoint: 'http://localhost:8080/api',\n  baseUrl: 'http://localhost:4200',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiEndpoint: 'http://localhost:8080/api',\n  baseUrl: 'http://localhost:4200',\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MultiSelectComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `<form #f=\"ngForm\" style=\"width:20rem\">\n  <app-multi-select ngModel name=\"userInput\" [options]=\"options\"> </app-multi-select>\n                 </form> \n                 <p class=\"mt-3\" >Form value: {{ f.value | json }}</p>\n  `,\n})"
            },
            {
                "name": "YourStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiEndpoint: 'http://localhost:8080/api',\n  baseUrl: 'http://localhost:4200',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiEndpoint: 'http://localhost:8080/api',\n  baseUrl: 'http://localhost:4200',\n}"
                }
            ],
            "src/stories/multi-select.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MultiSelectComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `<form #f=\"ngForm\" style=\"width:20rem\">\n  <app-multi-select ngModel name=\"userInput\" [options]=\"options\"> </app-multi-select>\n                 </form> \n                 <p class=\"mt-3\" >Form value: {{ f.value | json }}</p>\n  `,\n})"
                },
                {
                    "name": "YourStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/json.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "JsonService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/component-host.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ComponentHostDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/controls/base-conrol/base-conrol.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseConrolComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/controls/base-conrol/base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/directives/click-away.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickAwayDirective",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/directives/form-value.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormValueDirective",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/core/domain/field.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Field",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/domain/page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Page",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/dynamic-form/dynamic-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/multi-select/multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/pipe/parent-filter.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ParentFilterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/basic-api-store.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BasicApiStore",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/json-store.ts",
                "type": "class",
                "linktype": "classe",
                "name": "JsonStore",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/store-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StoreConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/store.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoreService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Store",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/popup/popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/sample/red/red.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "YourStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}