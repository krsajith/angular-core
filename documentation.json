{
    "pipes": [
        {
            "name": "ParentFilterPipe",
            "id": "pipe-ParentFilterPipe-6f6611c47b2de4d8b0fa1bb0b3d71466b42e0eafabcbcc2da27c28d44e7075933095cace90b02d40d9c9b9717fb58206b74b515e63d9c5eb7f72fc03cc8dde6d",
            "file": "src/app/core/pipe/parent-filter.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "list",
                            "type": "any[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "any[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "parentFilter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'parentFilter'\r\n})\r\nexport class ParentFilterPipe implements PipeTransform {\r\n\r\n  transform(list : any[] | null, ...args: any[]): any[] {\r\n    console.log(list, args);\r\n    return list || [];\r\n  }\r\n\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "Field",
            "id": "interface-Field-0ebc3e4dd7a12c8323081e691cad66c287e16ace0b8112c89a40d1c208452ce3cc106386a20e9b47a8f0b6d209d655d9afa47c66222cd641ec7803e68ebb9097",
            "file": "src/app/core/domain/field.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Field {\r\n    name: string;\r\n    type: string;\r\n    label: string;\r\n    value: any;\r\n    store: string;\r\n    required?: boolean;\r\n    order: number;\r\n    controlType: string;\r\n    parentField:string\r\n    labelField:string\r\n    valueField:string\r\n}\r\n",
            "properties": [
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "labelField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "parentField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "valueField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Page",
            "id": "interface-Page-bec4c73dbe8ee5f5f8056994f6b54be0c6c0ae2efd15c2e32b8c13fb2b4dcaf5a95ff9fc0c9c1c1ffb1bbe87eea1f95141c70d1d5392833e8515a47600fd8737",
            "file": "src/app/core/domain/page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Field } from \"./field\";\r\n\r\nexport interface Page {\r\n    fields: Field[];\r\n    name?: string;\r\n    title?: string;\r\n    description?: string;\r\n    url?:string\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Store",
            "id": "interface-Store-4ddea337a38fa4adee46ec0bb60d8dc5f25adc79c0c7f2a8107536859d65fd219056d050b2c2ddbcf024a857b48fc4ded3b2ffe3e2b52ca213e8cf8964bc63c2",
            "file": "src/app/core/store/store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from \"rxjs\";\r\n\r\nexport interface Store<T> {\r\n    values(): Observable<T[]>;\r\n    // filter(filter: any): Observable<T[]>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "values",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "StoreConfig",
            "id": "interface-StoreConfig-049e7788e4fcc0b2bb772ab99feaad16006c943418237811127916acdedb4e5d426560e5129a303a09169a87a9a2cb51cc439537aae893aebc2861fbdf76ea4a",
            "file": "src/app/core/store/store-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StoreConfig {\r\n    storeType:  string;\r\n    baseUrl:    string;\r\n    path:       string;\r\n    keyField:   string;\r\n    labelField: string;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "keyField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "labelField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "storeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-b646e4047afcb6cfa7528a11c2853f5b3be8c92845764152df6ec729cb314d27b4e512bf77077e86ac0ec51e99ee00cb46a6600d107001b571274782e4fd63b8",
            "file": "src/app/core/api/api.service.ts",
            "properties": [
                {
                    "name": "languages",
                    "defaultValue": "[\r\n    { code: 'EN', name: 'Engilish' },\r\n    { code: 'FR', name: 'French' },\r\n    { code: 'PT', name: 'Portuguese' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "createUpload",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<any>>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "postEvents",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entity",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entity",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n\r\n  languages = [\r\n    { code: 'EN', name: 'Engilish' },\r\n    { code: 'FR', name: 'French' },\r\n    { code: 'PT', name: 'Portuguese' },\r\n  ]\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  post(path: string, entity: any): Observable<any> {\r\n    return this.http.post<HttpResponse<any>>(`${environment.apiEndpoint}/${path}`, entity);\r\n  }\r\n\r\n  postEvents(path: string, entity: any): Observable<any> {\r\n    return this.http.post(`${environment.apiEndpoint}/${path}`, entity, {\r\n      reportProgress: true,\r\n      observe: 'events',\r\n      responseType: 'text'\r\n    });\r\n  }\r\n\r\n  get(path: string): Observable<any[]> {\r\n    return this.http.get<any[]>(`${environment.apiEndpoint}${path}`);\r\n  }\r\n\r\n  getById(path: string, id: string): Observable<any> {\r\n    return this.http.get<any>(`${environment.apiEndpoint}/${path}/${id}`);\r\n  }\r\n\r\n  createUpload(path: string, entity: any): Observable<HttpResponse<any>> {\r\n    return this.http.post<HttpResponse<any>>(`${environment.apiEndpoint}/${path}`, entity);\r\n  }\r\n\r\n  get httpClient() {\r\n    return this.http;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "httpClient": {
                    "name": "httpClient",
                    "getSignature": {
                        "name": "httpClient",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "JsonService",
            "id": "injectable-JsonService-a7f9218b29a683bbb65df00365f1518e83f79804a5229a815920dbb252db2cd324c5866fdeb805b9b88c883d3611bc32cf3dc2006c6b8077b439b2a121e21606",
            "file": "src/app/core/api/json.service.ts",
            "properties": [
                {
                    "name": "languages",
                    "defaultValue": "[\r\n    { code: 'EN', name: 'Engilish' },\r\n    { code: 'FR', name: 'French' },\r\n    { code: 'PT', name: 'Portuguese' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JsonService {\r\n\r\n  languages = [\r\n    { code: 'EN', name: 'Engilish' },\r\n    { code: 'FR', name: 'French' },\r\n    { code: 'PT', name: 'Portuguese' },\r\n  ]\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  get<T>(path: string): Observable<T> {\r\n    return this.http.get<T>(`${environment.baseUrl}${path}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StoreService",
            "id": "injectable-StoreService-de74c87f35fc225e97ecb46663ecd54074f0d1ec53b04693c9becd5bc3ef3af4f4f1bf2cc653b44a26335a09a1bb062f95ea25d91dd85a8a1dbfa2f062f923a1",
            "file": "src/app/core/store/store.service.ts",
            "properties": [
                {
                    "name": "stateObjects",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "stateQuery",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "storeConfigs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "stores",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | Store<any>>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "getState",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ApiService } from '../api/api.service';\r\nimport { JsonService } from '../api/json.service';\r\nimport { BasicApiStore } from './basic-api-store';\r\nimport { JsonStore } from './json-store';\r\n\r\nimport { Store } from './store';\r\nimport { StoreConfig } from './store-config';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StoreService {\r\n\r\n  stateObjects: { [k: string]: any } = {};\r\n\r\n  stateQuery: { [k: string]: string } = {};\r\n\r\n  stores: Map<string, Store<any>> = new Map();\r\n  \r\n  storeConfigs!:{ [k: string]: StoreConfig };\r\n\r\n  constructor(private jsonService: JsonService,private apiService:ApiService) {\r\n    jsonService.get<{ [k: string]: StoreConfig }>('/assets/application/config/stores.json').subscribe(data => {\r\n      this.storeConfigs=data;\r\n    });\r\n  }\r\n\r\n  getState<T extends Store<any>>(name: string): T {\r\n    if (!this.stores.has(name)) {\r\n      switch(this.storeConfigs[name].storeType) {\r\n        case 'JsonStore':\r\n          this.stores.set(name, new JsonStore(this.storeConfigs[name],this.jsonService));\r\n          break;\r\n        case 'ApiStore':\r\n          this.stores.set(name, new BasicApiStore(this.storeConfigs[name],this.apiService));\r\n      }\r\n      \r\n    }\r\n    return this.stores.get(name) as T;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "jsonService",
                        "type": "JsonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "jsonService",
                        "type": "JsonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "BasicApiStore",
            "id": "class-BasicApiStore-13f16b7cebcfbf0b971ad3512dd5b71475d25497f59cf7509ca183dc57097d43dcd40b75e3cc59682f11bf5f4305d576270a3fe289464ccedaaadce677453907",
            "file": "src/app/core/store/basic-api-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from \"rxjs\";\r\nimport { ApiService } from \"../api/api.service\";\r\nimport { Store } from \"./store\";\r\nimport { StoreConfig } from \"./store-config\";\r\n\r\nexport class BasicApiStore implements Store<any> {\r\n    \r\n    constructor(private storeConfig:StoreConfig,apiService:ApiService) {\r\n\r\n    }\r\n    filter(filter: any): Observable<any> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    values(): Observable<any> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storeConfig",
                        "type": "StoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "storeConfig",
                        "type": "StoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "filter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "values",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Store"
            ]
        },
        {
            "name": "JsonStore",
            "id": "class-JsonStore-696ebfb4e5d4a24beb0fea029493bbf881ec05403b076cf7416522d4840cf0f14e03c30c5fd68d0dc6d293fe32f6d08122358a9f53a95ee2647ca7396c4226d2",
            "file": "src/app/core/store/json-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { JsonService } from '../api/json.service';\r\nimport { Store } from './store';\r\nimport { StoreConfig } from './store-config';\r\n\r\nexport class JsonStore implements Store<any> {\r\n    protected _list$ = new BehaviorSubject<any[]>([]);\r\n    list$ = this._list$.asObservable();\r\n\r\n    constructor(\r\n        private storeConfig: StoreConfig,\r\n        private jsonService: JsonService\r\n    ) {\r\n        jsonService.get<any>(`${storeConfig.path}`).subscribe((data) => {\r\n            console.log(data);\r\n            this._list$.next(data);\r\n        });\r\n    }\r\n    values(): Observable<any[]> {\r\n        return this.list$;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storeConfig",
                        "type": "StoreConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jsonService",
                        "type": "JsonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "storeConfig",
                        "type": "StoreConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jsonService",
                        "type": "JsonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_list$",
                    "defaultValue": "new BehaviorSubject<any[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "list$",
                    "defaultValue": "this._list$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "values",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Store"
            ]
        },
        {
            "name": "SelectionModel",
            "id": "class-SelectionModel-827d9aa022a89e878d577287bac6e8916e594016f60ca893b5f10048304fb60778c1ce5f5e409abf71bb52fcdca03db945f8d5194e8ccf70c1ab0ee4aa95e369",
            "file": "src/app/core/domain/selection-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SelectionModel<T> {\r\n    private _selectedItems: Array<any> = [];\r\n\r\n    test = 'test';\r\n\r\n    constructor(private _isMultiple: boolean = false) {\r\n    }\r\n\r\n    toggle(value: T): void {\r\n        if (this._selectedItems.includes(value)) {\r\n            this._selectedItems.splice(this._selectedItems.indexOf(value), 1);\r\n        } else {\r\n            this._selectedItems.push(value);\r\n        }\r\n    }\r\n    get selected(): Array<T> {\r\n        return this._selectedItems;\r\n    }\r\n    \r\n    isSelected(value: T): boolean {\r\n        return this._selectedItems.includes(value);\r\n    }\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_isMultiple",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "_isMultiple",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_selectedItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "test",
                    "defaultValue": "'test'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "selected": {
                    "name": "selected",
                    "getSignature": {
                        "name": "selected",
                        "type": "",
                        "returnType": "Array<T>",
                        "line": 16
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ClickAwayDirective",
            "id": "directive-ClickAwayDirective-a6844f20dc74c34519f3b0dfe321737e8fb4cf6ff043241dc16a8e37b18fc3924a3fed9dcd70652ea912a6875b08fe4f6b3e4dd83b4930ec3335e2658f8e80a4",
            "file": "src/app/core/directives/click-away.directive.ts",
            "type": "directive",
            "description": "<p>Example Usage  &lt;a (clickAway)=&quot;showChildren=false&quot;/&gt;</p>\n",
            "rawdescription": "\n\nExample Usage  <a (clickAway)=\"showChildren=false\"/>\n",
            "sourceCode": "import {Directive, ElementRef, Output, EventEmitter, HostListener} from '@angular/core';\r\n\r\n/**\r\n *Example Usage  <a (clickAway)=\"showChildren=false\"/>\r\n */\r\n@Directive({\r\n    selector: '[clickAway]'\r\n})\r\nexport class ClickAwayDirective {\r\n    constructor(private _elementRef : ElementRef) {\r\n        console.log('ClickAway Directive Constructor');\r\n    }\r\n \r\n    @Output()\r\n    public clickAway = new EventEmitter();\r\n \r\n    @HostListener('document:click', ['$event.target'])\r\n    public onClick(targetElement:HTMLElement) {\r\n        console.log('ClickAway Directive');\r\n        const clickedInside = this._elementRef.nativeElement.contains(targetElement);\r\n        if (!clickedInside) {\r\n            this.clickAway.emit(targetElement);\r\n        }\r\n    }\r\n}",
            "selector": "[clickAway]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickAway",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ComponentHostDirective",
            "id": "directive-ComponentHostDirective-35fadab39a256b1af58798cb7f01c48188ba802d2971d58d783a0964b832eb2b3b3c1b2408b53722223979176c82817cf0c31c6cfacff2d5179e81be255d4e86",
            "file": "src/app/core/component-host.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appComponentHost]'\r\n})\r\nexport class ComponentHostDirective {\r\n  constructor(public viewContainerRef: ViewContainerRef) { }\r\n}\r\n",
            "selector": "[appComponentHost]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FormValueDirective",
            "id": "directive-FormValueDirective-8484c9e3e2f1077feace3465b2bb500476bd700c48ec612a8f06fd6023a3634e1cbfed3253dac73bfed82160c45f9c0e4a5f4b1f379950fa43ef25e9636d4fba",
            "file": "src/app/core/directives/form-value.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n  HostListener,\r\n  forwardRef,\r\n  HostBinding\r\n} from '@angular/core';\r\n\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n@Directive({\r\n  selector: '[formValue]',\r\n  providers:\r\n  [\r\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormValueDirective), multi: true }\r\n  ]\r\n})\r\nexport class FormValueDirective implements ControlValueAccessor {\r\n  @HostBinding('attr.contenteditable') enabled = false;\r\n\r\n  private onChange!: (value: string) => void;\r\n  private onTouched!: () => void;\r\n\r\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) { }\r\n\r\n  @HostListener('input') onInput(): void {\r\n    this.onChange(this.elementRef.nativeElement.innerHTML);\r\n  }\r\n\r\n  @HostListener('blur') onBlur(): void {\r\n    this.onTouched();\r\n  }\r\n\r\n  writeValue(value: string): void {\r\n    console.log(value)\r\n    this.elementRef.nativeElement.innerText =  value ;\r\n  }\r\n\r\n  registerOnChange(onChange: (value: string) => void): void {\r\n    this.onChange = onChange;\r\n  }\r\n\r\n  registerOnTouched(onTouched: () => void): void {\r\n    this.onTouched = onTouched;\r\n  }\r\n\r\n  setDisabledState(disabled: boolean): void {\r\n    this.enabled = !disabled;\r\n  }\r\n}",
            "selector": "[formValue]",
            "providers": [
                {
                    "name": "{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormValueDirective), multi: true }",
                    "type": "directive"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "attr.contenteditable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33
                },
                {
                    "name": "input",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29
                }
            ],
            "propertiesClass": [
                {
                    "name": "enabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'attr.contenteditable'"
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'blur'"
                        }
                    ]
                },
                {
                    "name": "onInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onChange",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "onTouched",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "onTouched",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "ControlValueAccessor"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-ec0f56ca44f5a1fd603054202c6450c953bcbfb1078a748a8adf68f2089107171fcad853c7bef1f1e834f9f12b92b0969901f3da16741b18085859afe6eb0b81",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentHost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentHostDirective",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "ComponentHostDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "data",
                    "defaultValue": "{id: 1, name: 'sajith'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "model",
                    "defaultValue": "new SelectionModel(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "options",
                    "defaultValue": "[\r\n    {value:'1',label:'One'},\r\n    {value:'2',label:'Two'},\r\n    {value:'3',label:'Three'},\r\n    {value:'4',label:'Four'},\r\n    {value:'5',label:'Five'},\r\n    {value:'6',label:'Six'},\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "popup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupComponent",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PopupComponent, {static: true}"
                        }
                    ]
                },
                {
                    "name": "selection",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title",
                    "defaultValue": "'ng-dynamic-page'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showPopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "test",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ComponentHostDirective } from './core/component-host.directive';\r\nimport { DynamicFormComponent } from './core/dynamic-form/dynamic-form.component';\r\nimport { Page } from \"src/app/core/domain/page\";\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { JsonService } from './core/api/json.service';\r\nimport { PopupComponent } from './popup/popup.component';\r\nimport { RedComponent } from './sample/red/red.component';\r\nimport {SelectionModel} from '@angular/cdk/collections'\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'ng-dynamic-page';\r\n\r\n  @ViewChild(ComponentHostDirective, { static: true }) componentHost!: ComponentHostDirective;\r\n\r\n  @ViewChild(PopupComponent, { static: true }) popup!: PopupComponent;\r\n\r\n  model = new SelectionModel(true);\r\n\r\n  data = {id: 1, name: 'sajith'};\r\n\r\n  selection = [];\r\n\r\n  options = [\r\n    {value:'1',label:'One'},\r\n    {value:'2',label:'Two'},\r\n    {value:'3',label:'Three'},\r\n    {value:'4',label:'Four'},\r\n    {value:'5',label:'Five'},\r\n    {value:'6',label:'Six'},\r\n  ]\r\n\r\n  constructor(private jsonService: JsonService) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // this.init();\r\n\r\n    // this.popup.show(RedComponent);\r\n\r\n    const model = new SelectionModel(false);\r\n\r\n    model.changed.subscribe(() => {\r\n      console.log(model.selected);\r\n    });\r\n    \r\n    \r\n    model.toggle(\"1\");\r\n    model.toggle(\"8\");\r\n    model.toggle(\"1\");\r\n    // console.log(model.selected);\r\n\r\n    \r\n\r\n  }\r\n\r\n\r\n  async init() {\r\n    const viewContainerRef = this.componentHost.viewContainerRef;\r\n    viewContainerRef.clear();\r\n\r\n    const componentRef = viewContainerRef.createComponent<DynamicFormComponent>(DynamicFormComponent);\r\n    const page = await firstValueFrom(this.jsonService.get<Page>('/assets/application/pages/sample-page.json'));\r\n\r\n    componentRef.instance.init(page);\r\n  }\r\n\r\n  showPopup() {\r\n    this.popup.show(RedComponent)\r\n  }\r\n\r\n  test($event: any) {\r\n   this.model.toggle(this.data);\r\n  }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "jsonService",
                        "type": "JsonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "jsonService",
                        "type": "JsonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\r\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\r\n</p>\r\n\r\n<button (click)=\"showPopup()\">Show popup</button>\r\n\r\n<app-popup></app-popup>\r\n\r\n\r\n<ng-template appComponentHost></ng-template>\r\n\r\n<input type=\"checkbox\" (change)=\"test($event)\"> Test\r\n\r\n{{this.model.selected | json}}\r\n\r\n\r\n    <app-multi-select [(ngModel)]=\"selection\" [options]=\"options\"> </app-multi-select>\r\n\r\n                   <p class=\"mt-3\" >Form value: {{selection | json }}</p>"
        },
        {
            "name": "BaseComponent",
            "id": "component-BaseComponent-739146616381ceb173c998ab9fe4e74e7f3bf38ffc1919da71c878e8fed205aeb11c7320d7cddd003d604c2c74d2ac8705883fdbfff3cd1f67e5bc7e330ca21e",
            "file": "src/app/core/controls/base-conrol/base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component,  OnDestroy } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-base'\r\n  , template: ''})\r\nexport class BaseComponent implements OnDestroy {\r\n\r\n  destroy$ = new Subject<boolean>();\r\n\r\n\r\n  ngOnDestroy() {\r\n    // this.destroy$.next(true);\r\n    this.destroy$.complete();\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "BaseConrolComponent",
            "id": "component-BaseConrolComponent-93a57736ba026edb590326c63d3bbe9f81d4966b93c9d3b210db71484479ea46756042e9cbbf1fcdd91025bd4790624ba48c1e5d8e103f3aa6cffa46f37a785f",
            "file": "src/app/core/controls/base-conrol/base-conrol.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base-conrol",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any | any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any | any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { BaseComponent } from './base.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-base-conrol',\r\n  template: ''\r\n})\r\nexport abstract class BaseConrolComponent extends BaseComponent implements ControlValueAccessor  {\r\n\r\n  onChange = (_: any) => { }\r\n  onTouch = () => { }\r\n  \r\n  constructor() { \r\n    super();\r\n  }\r\n  abstract writeValue(obj: any | any[]): void;\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouch = fn;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "extends": "BaseComponent",
            "implements": [
                "ControlValueAccessor"
            ]
        },
        {
            "name": "DynamicFormComponent",
            "id": "component-DynamicFormComponent-327d9493c47ca8815052ea15da085332dc771f8854d09b98f052aefdccfffe846f8f3b46dae17c60a1212344f3c65bcb1226f4959ae4c6924e7ed35c7b627bb2",
            "file": "src/app/core/dynamic-form/dynamic-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form",
            "styleUrls": [
                "./dynamic-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Page",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "parentValues",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "ready",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "stores",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "buildForm",
                    "args": [
                        {
                            "name": "fields",
                            "type": "Field[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "Field[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "page",
                            "type": "Page",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "Page",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Page } from 'src/app/core/domain/page';\r\nimport { Field } from 'src/app/core/domain/field';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { StoreService } from '../store/store.service';\r\nimport { Store } from '../store/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-dynamic-form',\r\n  templateUrl: './dynamic-form.component.html',\r\n  styleUrls: ['./dynamic-form.component.css'],\r\n})\r\nexport class DynamicFormComponent implements OnInit {\r\n  ready = false;\r\n  formGroup!: FormGroup;\r\n  page!: Page;\r\n  stores: { [k: string]: Store<any> } = {};\r\n  parentValues: { [k: string]: Observable<string> } = {};\r\n\r\n  constructor(private storeService: StoreService) {}\r\n\r\n  ngOnInit(): void {\r\n    console.log('DynamicFormComponent.ngOnInit()');\r\n  }\r\n\r\n  async init(page: Page) {\r\n    this.page = page;\r\n    await this.buildForm(page.fields);\r\n    this.ready = true;\r\n  }\r\n\r\n  private async buildForm(fields: Field[]) {\r\n    const parentFields = new Set(\r\n      fields\r\n        .filter((field) => field.parentField !== undefined)\r\n        .map((field) => field.parentField)\r\n    );\r\n\r\n    this.formGroup = new FormGroup({});\r\n    for (let field of fields) {\r\n      if (field.store) {\r\n        this.stores[field.store]= this.storeService.getState(field.store);\r\n      }\r\n\r\n      const formControl = new FormControl(field.value);\r\n      this.formGroup.addControl(field.name, formControl);\r\n\r\n      //any other field depends on this field\r\n      if (parentFields.has(field.name)) {\r\n        this.parentValues[field.name]=formControl.valueChanges;\r\n      }\r\n    }\r\n\r\n    console.log(this.formGroup,this.stores);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dynamic-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "storeService",
                        "type": "StoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"ready; else loading\">\r\n  <form [formGroup]=\"formGroup\">\r\n    <ng-container *ngFor=\"let field of page.fields; index as i\">\r\n      <div [ngSwitch]=\"field.type\">\r\n        <label>{{ field.label }}<br>\r\n          <input\r\n            *ngSwitchCase=\"'text'\"\r\n            formControlName=\"{{ field.name }}\"\r\n            type=\"text\"/>\r\n\r\n          <select\r\n            *ngSwitchCase=\"'select'\"\r\n            formControlName=\"{{ field.name }}\">\r\n            <option selected disabled value=null>Select</option>\r\n            <option *ngFor=\"let value of stores[field.store].values() | async |  parentFilter: (parentValues[field.parentField] | async)\" value=\"{{value[field.valueField]}}\" >{{value[field.labelField]}}</option>\r\n        </select>\r\n\r\n        </label>\r\n      </div>\r\n    </ng-container>\r\n  </form>\r\n  {{ formGroup.value | json }}\r\n</ng-container>\r\n\r\n<ng-template #loading>Loading...</ng-template>\r\n\r\n<!-- {{parentValues | a | json}} -->"
        },
        {
            "name": "MultiSelectComponent",
            "id": "component-MultiSelectComponent-6fa8c15a73ec913536ebe70c2de583df6d654f30a6071ce6a47400fc1cf810cf88c2ae733d7984665456b7c1092c1424c0776caaf8c38d77b5404df1d62cdd1c",
            "file": "src/app/core/multi-select/multi-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => MultiSelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-multi-select",
            "styleUrls": [
                "./multi-select.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "'value'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "dropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dropdown', {static: true}"
                        }
                    ]
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedOptions",
                    "defaultValue": "new SelectionModel(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectionModel<any>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'target', {static: true}"
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "BaseConrolComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "BaseConrolComponent"
                    }
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "hideDropDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDropDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseConrolComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseConrolComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseConrolComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { SelectionModel } from '@angular/cdk/collections';\r\nimport { Component, ElementRef, forwardRef, Input, ViewChild } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BaseConrolComponent } from '../controls/base-conrol/base-conrol.component';\r\nimport { computePosition, flip } from '@floating-ui/dom';\r\n\r\n@Component({\r\n  selector: 'app-multi-select',\r\n  templateUrl: './multi-select.component.html',\r\n  styleUrls: ['./multi-select.component.css'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MultiSelectComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class MultiSelectComponent extends BaseConrolComponent {\r\n  isOpen = false;\r\n  _options!: any[];\r\n  @Input() label: string = 'label';\r\n  @Input() value: string = 'value';\r\n\r\n  selectedOptions: SelectionModel<any> = new SelectionModel(true);\r\n  selectedLabel!: string | unknown;\r\n\r\n  @ViewChild('target', { static: true }) target!: ElementRef;\r\n  @ViewChild('dropdown', { static: true }) dropdown!: ElementRef;\r\n\r\n  constructor() {\r\n    super();\r\n    console.log(this.selectedOptions);\r\n  }\r\n\r\n  writeValue(value: any[]): void {\r\n    if (value && value.length > 0) {\r\n      this.selectedOptions.select(value);\r\n      console.log('writeValue', value);\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  public set options(options: any[]) {\r\n    console.log('options', options);\r\n    this._options = options;\r\n    this.selectedOptions = new SelectionModel(true);\r\n  }\r\n\r\n  toggle(option: any) {\r\n    console.log(this.selectedOptions.selected);\r\n    this.selectedOptions.toggle(option);\r\n    this.onChange(this.selectedOptions.selected.map((o: any) => o[this.value]));\r\n    this.selectedLabel = this.selectedOptions.selected\r\n      .map((o: any) => o[this.label])\r\n      .join(', ');\r\n  }\r\n\r\n  showDropDown() {\r\n    this.isOpen = !this.isOpen;\r\n\r\n    if(!this.isOpen) {\r\n      this.hideDropDown();\r\n      return;\r\n    }\r\n    \r\n    console.log(this.target, this.dropdown);\r\n    this.dropdown.nativeElement.style.display='flex';\r\n    computePosition(this.target.nativeElement, this.dropdown.nativeElement, {\r\n      placement: 'top',\r\n      middleware: [flip()],\r\n    }).then(({ x, y }) => {\r\n      Object.assign(this.dropdown.nativeElement.style, {\r\n        left: `${x}px`,\r\n        top: `${y}px`,\r\n      });\r\n    });\r\n  }\r\n\r\n  hideDropDown() {\r\n    this.dropdown.nativeElement.style.display='none';\r\n    this.isOpen=false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./multi-select.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "extends": "BaseConrolComponent",
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "options",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "options",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "{{isOpen}}\r\n\r\n<div (clickAway)=\"hideDropDown()\">\r\n<span (click)=\"showDropDown()\" type=\"button\" #target\r\n  class=\"\r\n    appearance-none\r\n    rounded\r\n    border border-gray-500\r\n    px-2\r\n    py-2\r\n    text-sm text-gray-600\r\n    hover:border-blue-300\r\n    focus:border-blue-400\r\n    focus:outline-none\r\n    flex\r\n  \"\r\n>\r\n  <label class=\"flex-grow\">{{selectedLabel}}</label>\r\n\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    class=\"h-5 w-5\"\r\n    viewBox=\"0 0 20 20\"\r\n    fill=\"currentColor\"\r\n  >\r\n    <path\r\n      fill-rule=\"evenodd\"\r\n      d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\r\n      clip-rule=\"evenodd\"\r\n    />\r\n  </svg>\r\n</span>\r\n\r\n\r\n  <span class=\"flex-col hidden shadow rounded \" #dropdown>\r\n    <label *ngFor=\"let option of _options\" class=\"text-base hover:bg-gray-100 px-2 py-1\">\r\n      <input class=\"w-3 h-3\" type=\"checkbox\"  [checked]=\"selectedOptions.isSelected(option)\" (change)=\"toggle(option)\"  /> {{ option[label] }}\r\n    </label>\r\n  </span>\r\n\r\n</div>\r\n\r\n"
        },
        {
            "name": "PopupComponent",
            "id": "component-PopupComponent-ef3f47027d1c161aad20cb0f7fdf6c1f4cf7c4fc2482a1f07ff02b0fc050f68ebae2bdea8843acdd2f30eefa730177dbf4dc61f65eb8c29273b2d09c120ef8c4",
            "file": "src/app/popup/popup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popup",
            "styleUrls": [
                "./popup.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./popup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentHost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentHostDirective",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "ComponentHostDirective, {static: false}"
                        }
                    ]
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "baseComponent",
                            "type": "Type<BaseComponent>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "baseComponent",
                            "type": "Type<BaseComponent>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Type, ViewChild } from '@angular/core';\r\nimport { ComponentHostDirective } from '../core/component-host.directive';\r\nimport { BaseComponent } from '../core/controls/base-conrol/base.component';\r\n\r\n@Component({\r\n  selector: 'app-popup',\r\n  templateUrl: './popup.component.html',\r\n  styleUrls: ['./popup.component.css']\r\n})\r\nexport class PopupComponent implements OnInit {\r\n\r\n  @ViewChild(ComponentHostDirective, { static: false }) componentHost!: ComponentHostDirective;\r\n\r\n  visible = false;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  show(baseComponent:Type<BaseComponent>): void {\r\n\r\n    this.visible = true;\r\n    setTimeout(() => {\r\n      const viewContainerRef = this.componentHost.viewContainerRef;\r\n      viewContainerRef.clear();\r\n      const componentRef = viewContainerRef.createComponent< BaseComponent>(baseComponent);\r\n        \r\n    }, 300);\r\n   \r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popup.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"visible\" class=\"inset-0 bg-slate-500/20 absolute  grid place-content-center\" >\r\n\r\n    <ng-template appComponentHost>\r\n    \r\n    </ng-template> \r\n    \r\n\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "RedComponent",
            "id": "component-RedComponent-a7363a03badde777a55b708aeab266e82fbb9cb13a3d98163d36886dce2d16ee180edeabf5f0fd137dbc982a937069350063a19db0f2a48d1894813c6b715667",
            "file": "src/app/sample/red/red.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-red",
            "styleUrls": [
                "./red.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./red.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { BaseComponent } from 'src/app/core/controls/base-conrol/base.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-red',\r\n  templateUrl: './red.component.html',\r\n  styleUrls: ['./red.component.css']\r\n})\r\nexport class RedComponent extends BaseComponent implements OnInit {\r\n  constructor(private http: HttpClient) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log('RedComponent.ngOnInit',this.http);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./red.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<img src=\"https://picsum.photos/500/400?random=1\">"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-6425207007046ff48c83a7789150cceabc78442d367b0d3beb173285c35da0db850096234c59d93726e073a048e0ac44112cf04f7f1a2c9df05b620720fc94fd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { DynamicFormComponent } from './core/dynamic-form/dynamic-form.component';\r\nimport { ComponentHostDirective } from './core/component-host.directive';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ParentFilterPipe } from './core/pipe/parent-filter.pipe';\r\nimport { PopupComponent } from './popup/popup.component';\r\nimport { RedComponent } from './sample/red/red.component';\r\nimport { MultiSelectComponent } from './core/multi-select/multi-select.component';\r\n// import { OverlayModule } from '@angular/cdk/overlay';\r\nimport { ClickAwayDirective } from './core/directives/click-away.directive';\r\n// import { ClickAwayDirective } from './core/directives/click-away.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    DynamicFormComponent,\r\n    ComponentHostDirective,\r\n    ParentFilterPipe,\r\n    PopupComponent,\r\n    RedComponent,\r\n    MultiSelectComponent,\r\n    ClickAwayDirective\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    // OverlayModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ClickAwayDirective"
                        },
                        {
                            "name": "ComponentHostDirective"
                        },
                        {
                            "name": "DynamicFormComponent"
                        },
                        {
                            "name": "MultiSelectComponent"
                        },
                        {
                            "name": "ParentFilterPipe"
                        },
                        {
                            "name": "PopupComponent"
                        },
                        {
                            "name": "RedComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-4518c33195180c88b148f5ad346bbd509e37db201ff0191c9bd5d00989bc674a7e8476b2298b5f61b74b4fa3379b6d71a3615e2cc472074cf6e416b23941131b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  apiEndpoint: 'http://localhost:8080/api',\r\n  baseUrl: 'http://localhost:4200',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  apiEndpoint: 'http://localhost:8080/api',\r\n  baseUrl: 'http://localhost:4200',\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MultiSelectComponent>",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n  template: `\r\n  <p class=\"mt-3\" >Form value: {{ f.value | json }}</p>\r\n  <form #f=\"ngForm\" style=\"width:20rem\">\r\n  <app-multi-select ngModel name=\"userInput\" [options]=\"options\"> </app-multi-select>\r\n                 </form> \r\n  `,\r\n})"
            },
            {
                "name": "YourStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/multi-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  apiEndpoint: 'http://localhost:8080/api',\r\n  baseUrl: 'http://localhost:4200',\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  apiEndpoint: 'http://localhost:8080/api',\r\n  baseUrl: 'http://localhost:4200',\r\n}"
                }
            ],
            "src/stories/multi-select.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MultiSelectComponent>",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n  template: `\r\n  <p class=\"mt-3\" >Form value: {{ f.value | json }}</p>\r\n  <form #f=\"ngForm\" style=\"width:20rem\">\r\n  <app-multi-select ngModel name=\"userInput\" [options]=\"options\"> </app-multi-select>\r\n                 </form> \r\n  `,\r\n})"
                },
                {
                    "name": "YourStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/multi-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/api/json.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "JsonService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/component-host.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ComponentHostDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/controls/base-conrol/base-conrol.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseConrolComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/controls/base-conrol/base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/directives/click-away.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickAwayDirective",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/directives/form-value.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormValueDirective",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/core/domain/field.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Field",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/domain/page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Page",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/domain/selection-model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectionModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/dynamic-form/dynamic-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/multi-select/multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/core/pipe/parent-filter.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ParentFilterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/basic-api-store.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BasicApiStore",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/json-store.ts",
                "type": "class",
                "linktype": "classe",
                "name": "JsonStore",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/store-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StoreConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/store.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoreService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Store",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/popup/popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/sample/red/red.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/multi-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "YourStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}